;;;; .emacs
;;;; by Rob Kelly <tetramor.ph>
;; (This is git-controlled in the .emacs.d directory.)
;; (Don't forget to `ln -s ~/.emacs.d/dot-emacs ~/.emacs`)
;; Note that this is the LIGHT revision
;; This does not configure major modes

;;;; Package management configuration:
;; {{{
(add-to-list 'load-path "~/.emacs.d/elisp")
(package-initialize)

;; package manager initialization
(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ;; ("melpa" . "http://melpa.milkbox.net/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))
;; }}}

;;;; Load and configure packages (non-managed):
;; {{{

;; Remote file editing through scp
(require 'tramp)
(setq tramp-default-method "scp")
(set-default 'tramp-default-proxies-alist (quote ((".*" "\\ `root\\'" "/ssh:%h"))))

;; Load autopair
(require 'autopair)
(autopair-global-mode)
(eval-after-load "tex-mode"
  '(modify-syntax-entry ?$ "\"" latex-mode-syntax-table))

;; Load whitespace mode and bind
(require 'whitespace)
(global-set-key (kbd "C-x w") 'whitespace-mode)

;; Load linum mode
(require 'linum)
(global-linum-mode)

;; Load IDO (Interactively Do Things)
(require 'ido)
;; (ido-mode t)

;; Load tree edit mode
(require 'tree-edit-mode)

;; auto-complete configuration
;; (ac-config-default)
(setq
 ac-auto-start 2
 ac-override-local-map nil
 ac-use-menu-map t
 ac-candidate-limit 20
 ac-auto-show-menu 0.3
 ac-delay 0.05)

;; }}}

;;;; Major mode hooks & configuration:
;; {{{

;;; Emacs Help mode
(add-hook 'help-mode-hook 'form-feed-mode)

;;; Processing mode
;; (add-to-list 'load-path "~/.emacs.d/processing-emacs/")
;; (autoload 'processing-mode "processing-mode" "Processing mode" t)
;; (add-to-list 'auto-mode-alist '("\\.pde$" . processing-mode))
;; (setq processing-location "/usr/bin/processing-java")

;;; ASM mode
;; (defun nasm-compile ()
;;   "Compile with nasm, default args"
;;   (interactive)
;;   (shell-command-on-region
;;    ;; Beginning and end of buffer
;;    (point-min)
;;    (point-max)
;;    ;; Command and parameters
;;    (format "nasm %s" (file-name-nondirectory buffer-file-name))
;;    ;; Get or create output buffer
;;    (generate-new-buffer "NASM")
;;    ;; Do not replace current buffer
;;    nil
;;    ;; Error buffer
;;    "##NASM Error Buffer##"
;;    ;; Show error buffer
;;    t ))
;;
;; (add-hook 'asm-mode-hook
;;   (lambda ()
;;     (local-set-key (kbd "C-c C-c") 'nasm-compile)))

;;; AUCTeX mode
;; (load "auctex.el" nil t t)
;; (load "preview-latex.el" nil t t)
;; (setq TeX-auto-save t)
;; (setq TeX-parse-self t)
;; (setq TeX-save-query nil)
;; (setq TeX-PDF-mode t)

;; ;; LaTeX hooks (not AUCTeX specific)
;; (defun turn-on-outline-minor-mode ()
;;   (outline-minor-mode 1))
;; (add-hook 'LaTeX-mode-hook 'turn-on-outline-minor-mode)
;; (add-hook 'latex-mode-hook 'turn-on-outline-minor-mode)
;; (setq outline-minor-mode-prefix "\C-c\C-w") 

;;; ARFF mode
;; (require 'arff)

;;; C mode
;; (add-hook 'c-mode-common-hook '(lambda () (c-set-offset 'case-label '+)))
;; (add-hook 'c-mode-common-hook '(lambda () (column-enforce-mode 1)))
;; Load CC (C & C++) mode
;; (require 'cc-mode)
;; (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)

;;; SQL mode
;; (require 'sql-indent)
;; (add-hook 'sql-mode-hook '(lambda () (column-enforce-mode 1)))

;;; Python mode
;; (add-hook 'python-mode-hook '(lambda () (column-enforce-mode 1)))
;; ;; (add-hook 'python-mode-hook '(lambda () (eldoc-mode 1)))
;; (add-hook 'python-mode-hook 'jedi:setup)
;; (setq jedi:complete-on-dot t)
;; ;; ipython setup
;; (setq-default python-shell-interpreter "ipython")
;; (setq-default python-shell-interpreter-args "-i")

;;; ESS mode (R & others)
;; (setq load-path (cons "/usr/share/emacs/site-lisp/ess" load-path))
;; (require 'ess-site)
;; }}}

;;;; Miscellaneous configuration:
;; {{{

;; Global keybindings
(global-set-key (kbd "C-g") 'goto-line)
(global-set-key (kbd "C-f") 'dabbrev-expand)
(global-set-key (kbd "M-/") 'comment-or-uncomment-region)

;; Just emacs things (dot tumblr dot com)
(setq-default column-number-mode t)
(set-variable 'frame-background-mode 'dark)
(setq default-fill-column 80)

;; four-space tabs four-life, fam.
(setq-default c-default-style "linux"
			  c-basic-offset 4
			  tab-width 4
			  indent-tabs-mode nil)

;; startup behavior -- launch to scratch buffer w/ logo
(setq inhibit-startup-screen t)
(setq initial-scratch-message
      (with-temp-buffer
        (insert-file-contents "~/.emacs.d/logos/default")
        (buffer-string)))

;; }}}

;;;; "Custom" settings -- autogenerated, avoid editing where possible...
;; {{{
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;; '(LaTeX-item-indent 0)
 ;; '(TeX-command-list
 ;;   (quote
 ;;    (("TeX" "%(PDF)%(tex) %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
 ;;      (plain-tex-mode texinfo-mode ams-tex-mode)
 ;;      :help "Run plain TeX")
 ;;     ("LaTeX" "%`%l%(mode) -shell-escape%' %t" TeX-run-TeX nil
 ;;      (latex-mode doctex-mode)
 ;;      :help "Run LaTeX")
 ;;     ("Makeinfo" "makeinfo %(extraopts) %t" TeX-run-compile nil
 ;;      (texinfo-mode)
 ;;      :help "Run Makeinfo with Info output")
 ;;     ("Makeinfo HTML" "makeinfo %(extraopts) --html %t" TeX-run-compile nil
 ;;      (texinfo-mode)
 ;;      :help "Run Makeinfo with HTML output")
 ;;     ("AmSTeX" "%(PDF)amstex %(extraopts) %`%S%(PDFout)%(mode)%' %t" TeX-run-TeX nil
 ;;      (ams-tex-mode)
 ;;      :help "Run AMSTeX")
 ;;     ("ConTeXt" "texexec --once --texutil %(extraopts) %(execopts)%t" TeX-run-TeX nil
 ;;      (context-mode)
 ;;      :help "Run ConTeXt once")
 ;;     ("ConTeXt Full" "texexec %(extraopts) %(execopts)%t" TeX-run-TeX nil
 ;;      (context-mode)
 ;;      :help "Run ConTeXt until completion")
 ;;     ("BibTeX" "bibtex %s" TeX-run-BibTeX nil t :help "Run BibTeX")
 ;;     ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber")
 ;;     ;; ("LoadView" "xpdf -remote %s %s.pdf" TeX-run-discard-or-function t t :help "Load Viewer")
 ;;     ;; ("View" "xpdf -remote %s -reload" TeX-run-discard-or-function t t :help "Run Viewer")
 ;;     ("View" "bash -c \"if pgrep -f '^xpdf.*%s'; then xpdf -remote %s -reload; else xpdf -cont -remote %s %s.pdf; fi\"" TeX-run-discard-or-function t t :help "Run Viewer")
 ;;     ("Print" "%p" TeX-run-command t t :help "Print the file")
 ;;     ("Queue" "%q" TeX-run-background nil t :help "View the printer queue" :visible TeX-queue-command)
 ;;     ("File" "%(o?)dvips %d -o %f " TeX-run-command t t :help "Generate PostScript file")
 ;;     ("Index" "makeindex %s" TeX-run-command nil t :help "Create index file")
 ;;     ("Xindy" "texindy %s" TeX-run-command nil t :help "Run xindy to create index file")
 ;;     ("Check" "lacheck %s" TeX-run-compile nil
 ;;      (latex-mode)
 ;;      :help "Check LaTeX file for correctness")
 ;;     ("ChkTeX" "chktex -v6 %s" TeX-run-compile nil
 ;;      (latex-mode)
 ;;      :help "Check LaTeX file for common mistakes")
 ;;     ("Spell" "(TeX-ispell-document \"\")" TeX-run-function nil t :help "Spell-check the document")
 ;;     ("Clean" "TeX-clean" TeX-run-function nil t :help "Delete generated intermediate files")
 ;;     ("Clean All" "(TeX-clean t)" TeX-run-function nil t :help "Delete generated intermediate and output files")
 ;;     ("Other" "" TeX-run-command t t :help "Run an arbitrary command"))))
 ;; '(gud-gdb-command-name "gdb --annotate=1")
 ;; '(haskell-mode-hook (quote (turn-on-haskell-indentation)))
 '(large-file-warning-threshold nil)
 '(safe-local-variable-values
   (quote
    ((whitespace-style face tabs spaces trailing lines space-before-tab::space newline indentation::space empty space-after-tab::space space-mark tab-mark newline-mark)))))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;; '(font-lock-comment-face ((((class color) (min-colors 88) (background light)) (:foreground "Pink"))))
 ;; '(font-lock-function-name-face ((((class color) (min-colors 88) (background light)) (:foreground "cyan"))))
 )

;; }}}
